/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.hollysys.platform.rpc.proxy.api.provider;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2019-12-13")
public class RpcProxyProvider {

  public interface Iface {

    public String invoke(String serverName, String providerName, String methodName, java.util.List<String> params) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void invoke(String serverName, String providerName, String methodName, java.util.List<String> params, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public String invoke(String serverName, String providerName, String methodName, java.util.List<String> params) throws org.apache.thrift.TException
    {
      send_invoke(serverName, providerName, methodName, params);
      return recv_invoke();
    }

    public void send_invoke(String serverName, String providerName, String methodName, java.util.List<String> params) throws org.apache.thrift.TException
    {
      invoke_args args = new invoke_args();
      args.setServerName(serverName);
      args.setProviderName(providerName);
      args.setMethodName(methodName);
      args.setParams(params);
      sendBase("invoke", args);
    }

    public String recv_invoke() throws org.apache.thrift.TException
    {
      invoke_result result = new invoke_result();
      receiveBase(result, "invoke");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "invoke failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void invoke(String serverName, String providerName, String methodName, java.util.List<String> params, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      invoke_call method_call = new invoke_call(serverName, providerName, methodName, params, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class invoke_call extends org.apache.thrift.async.TAsyncMethodCall<String> {
      private String serverName;
      private String providerName;
      private String methodName;
      private java.util.List<String> params;
      public invoke_call(String serverName, String providerName, String methodName, java.util.List<String> params, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.serverName = serverName;
        this.providerName = providerName;
        this.methodName = methodName;
        this.params = params;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("invoke", org.apache.thrift.protocol.TMessageType.CALL, 0));
        invoke_args args = new invoke_args();
        args.setServerName(serverName);
        args.setProviderName(providerName);
        args.setMethodName(methodName);
        args.setParams(params);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_invoke();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, java.util.Map<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> java.util.Map<String,  org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> getProcessMap(java.util.Map<String, org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("invoke", new invoke());
      return processMap;
    }

    public static class invoke<I extends Iface> extends org.apache.thrift.ProcessFunction<I, invoke_args> {
      public invoke() {
        super("invoke");
      }

      public invoke_args getEmptyArgsInstance() {
        return new invoke_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public invoke_result getResult(I iface, invoke_args args) throws org.apache.thrift.TException {
        invoke_result result = new invoke_result();
        result.success = iface.invoke(args.serverName, args.providerName, args.methodName, args.params);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, java.util.Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> java.util.Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(java.util.Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("invoke", new invoke());
      return processMap;
    }

    public static class invoke<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, invoke_args, String> {
      public invoke() {
        super("invoke");
      }

      public invoke_args getEmptyArgsInstance() {
        return new invoke_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<String> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<String>() {
          public void onComplete(String o) {
            invoke_result result = new invoke_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            invoke_result result = new invoke_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, invoke_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws org.apache.thrift.TException {
        iface.invoke(args.serverName, args.providerName, args.methodName, args.params,resultHandler);
      }
    }

  }

  public static class invoke_args implements org.apache.thrift.TBase<invoke_args, invoke_args._Fields>, java.io.Serializable, Cloneable, Comparable<invoke_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("invoke_args");

    private static final org.apache.thrift.protocol.TField SERVER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("serverName", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField PROVIDER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("providerName", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField METHOD_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("methodName", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField PARAMS_FIELD_DESC = new org.apache.thrift.protocol.TField("params", org.apache.thrift.protocol.TType.LIST, (short)4);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new invoke_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new invoke_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable String serverName; // required
    public @org.apache.thrift.annotation.Nullable String providerName; // required
    public @org.apache.thrift.annotation.Nullable String methodName; // required
    public @org.apache.thrift.annotation.Nullable java.util.List<String> params; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SERVER_NAME((short)1, "serverName"),
      PROVIDER_NAME((short)2, "providerName"),
      METHOD_NAME((short)3, "methodName"),
      PARAMS((short)4, "params");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SERVER_NAME
            return SERVER_NAME;
          case 2: // PROVIDER_NAME
            return PROVIDER_NAME;
          case 3: // METHOD_NAME
            return METHOD_NAME;
          case 4: // PARAMS
            return PARAMS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SERVER_NAME, new org.apache.thrift.meta_data.FieldMetaData("serverName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PROVIDER_NAME, new org.apache.thrift.meta_data.FieldMetaData("providerName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.METHOD_NAME, new org.apache.thrift.meta_data.FieldMetaData("methodName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PARAMS, new org.apache.thrift.meta_data.FieldMetaData("params", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(invoke_args.class, metaDataMap);
    }

    public invoke_args() {
    }

    public invoke_args(
      String serverName,
      String providerName,
      String methodName,
      java.util.List<String> params)
    {
      this();
      this.serverName = serverName;
      this.providerName = providerName;
      this.methodName = methodName;
      this.params = params;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public invoke_args(invoke_args other) {
      if (other.isSetServerName()) {
        this.serverName = other.serverName;
      }
      if (other.isSetProviderName()) {
        this.providerName = other.providerName;
      }
      if (other.isSetMethodName()) {
        this.methodName = other.methodName;
      }
      if (other.isSetParams()) {
        java.util.List<String> __this__params = new java.util.ArrayList<String>(other.params);
        this.params = __this__params;
      }
    }

    public invoke_args deepCopy() {
      return new invoke_args(this);
    }

    @Override
    public void clear() {
      this.serverName = null;
      this.providerName = null;
      this.methodName = null;
      this.params = null;
    }

    @org.apache.thrift.annotation.Nullable
    public String getServerName() {
      return this.serverName;
    }

    public invoke_args setServerName(@org.apache.thrift.annotation.Nullable String serverName) {
      this.serverName = serverName;
      return this;
    }

    public void unsetServerName() {
      this.serverName = null;
    }

    /** Returns true if field serverName is set (has been assigned a value) and false otherwise */
    public boolean isSetServerName() {
      return this.serverName != null;
    }

    public void setServerNameIsSet(boolean value) {
      if (!value) {
        this.serverName = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public String getProviderName() {
      return this.providerName;
    }

    public invoke_args setProviderName(@org.apache.thrift.annotation.Nullable String providerName) {
      this.providerName = providerName;
      return this;
    }

    public void unsetProviderName() {
      this.providerName = null;
    }

    /** Returns true if field providerName is set (has been assigned a value) and false otherwise */
    public boolean isSetProviderName() {
      return this.providerName != null;
    }

    public void setProviderNameIsSet(boolean value) {
      if (!value) {
        this.providerName = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public String getMethodName() {
      return this.methodName;
    }

    public invoke_args setMethodName(@org.apache.thrift.annotation.Nullable String methodName) {
      this.methodName = methodName;
      return this;
    }

    public void unsetMethodName() {
      this.methodName = null;
    }

    /** Returns true if field methodName is set (has been assigned a value) and false otherwise */
    public boolean isSetMethodName() {
      return this.methodName != null;
    }

    public void setMethodNameIsSet(boolean value) {
      if (!value) {
        this.methodName = null;
      }
    }

    public int getParamsSize() {
      return (this.params == null) ? 0 : this.params.size();
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.Iterator<String> getParamsIterator() {
      return (this.params == null) ? null : this.params.iterator();
    }

    public void addToParams(String elem) {
      if (this.params == null) {
        this.params = new java.util.ArrayList<String>();
      }
      this.params.add(elem);
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.List<String> getParams() {
      return this.params;
    }

    public invoke_args setParams(@org.apache.thrift.annotation.Nullable java.util.List<String> params) {
      this.params = params;
      return this;
    }

    public void unsetParams() {
      this.params = null;
    }

    /** Returns true if field params is set (has been assigned a value) and false otherwise */
    public boolean isSetParams() {
      return this.params != null;
    }

    public void setParamsIsSet(boolean value) {
      if (!value) {
        this.params = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable Object value) {
      switch (field) {
      case SERVER_NAME:
        if (value == null) {
          unsetServerName();
        } else {
          setServerName((String)value);
        }
        break;

      case PROVIDER_NAME:
        if (value == null) {
          unsetProviderName();
        } else {
          setProviderName((String)value);
        }
        break;

      case METHOD_NAME:
        if (value == null) {
          unsetMethodName();
        } else {
          setMethodName((String)value);
        }
        break;

      case PARAMS:
        if (value == null) {
          unsetParams();
        } else {
          setParams((java.util.List<String>)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SERVER_NAME:
        return getServerName();

      case PROVIDER_NAME:
        return getProviderName();

      case METHOD_NAME:
        return getMethodName();

      case PARAMS:
        return getParams();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SERVER_NAME:
        return isSetServerName();
      case PROVIDER_NAME:
        return isSetProviderName();
      case METHOD_NAME:
        return isSetMethodName();
      case PARAMS:
        return isSetParams();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof invoke_args)
        return this.equals((invoke_args)that);
      return false;
    }

    public boolean equals(invoke_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_serverName = true && this.isSetServerName();
      boolean that_present_serverName = true && that.isSetServerName();
      if (this_present_serverName || that_present_serverName) {
        if (!(this_present_serverName && that_present_serverName))
          return false;
        if (!this.serverName.equals(that.serverName))
          return false;
      }

      boolean this_present_providerName = true && this.isSetProviderName();
      boolean that_present_providerName = true && that.isSetProviderName();
      if (this_present_providerName || that_present_providerName) {
        if (!(this_present_providerName && that_present_providerName))
          return false;
        if (!this.providerName.equals(that.providerName))
          return false;
      }

      boolean this_present_methodName = true && this.isSetMethodName();
      boolean that_present_methodName = true && that.isSetMethodName();
      if (this_present_methodName || that_present_methodName) {
        if (!(this_present_methodName && that_present_methodName))
          return false;
        if (!this.methodName.equals(that.methodName))
          return false;
      }

      boolean this_present_params = true && this.isSetParams();
      boolean that_present_params = true && that.isSetParams();
      if (this_present_params || that_present_params) {
        if (!(this_present_params && that_present_params))
          return false;
        if (!this.params.equals(that.params))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetServerName()) ? 131071 : 524287);
      if (isSetServerName())
        hashCode = hashCode * 8191 + serverName.hashCode();

      hashCode = hashCode * 8191 + ((isSetProviderName()) ? 131071 : 524287);
      if (isSetProviderName())
        hashCode = hashCode * 8191 + providerName.hashCode();

      hashCode = hashCode * 8191 + ((isSetMethodName()) ? 131071 : 524287);
      if (isSetMethodName())
        hashCode = hashCode * 8191 + methodName.hashCode();

      hashCode = hashCode * 8191 + ((isSetParams()) ? 131071 : 524287);
      if (isSetParams())
        hashCode = hashCode * 8191 + params.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(invoke_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetServerName()).compareTo(other.isSetServerName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetServerName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.serverName, other.serverName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetProviderName()).compareTo(other.isSetProviderName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProviderName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.providerName, other.providerName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetMethodName()).compareTo(other.isSetMethodName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMethodName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.methodName, other.methodName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetParams()).compareTo(other.isSetParams());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetParams()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.params, other.params);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("invoke_args(");
      boolean first = true;

      sb.append("serverName:");
      if (this.serverName == null) {
        sb.append("null");
      } else {
        sb.append(this.serverName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("providerName:");
      if (this.providerName == null) {
        sb.append("null");
      } else {
        sb.append(this.providerName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("methodName:");
      if (this.methodName == null) {
        sb.append("null");
      } else {
        sb.append(this.methodName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("params:");
      if (this.params == null) {
        sb.append("null");
      } else {
        sb.append(this.params);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class invoke_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public invoke_argsStandardScheme getScheme() {
        return new invoke_argsStandardScheme();
      }
    }

    private static class invoke_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<invoke_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, invoke_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SERVER_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.serverName = iprot.readString();
                struct.setServerNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PROVIDER_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.providerName = iprot.readString();
                struct.setProviderNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // METHOD_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.methodName = iprot.readString();
                struct.setMethodNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // PARAMS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                  struct.params = new java.util.ArrayList<String>(_list0.size);
                  @org.apache.thrift.annotation.Nullable String _elem1;
                  for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                  {
                    _elem1 = iprot.readString();
                    struct.params.add(_elem1);
                  }
                  iprot.readListEnd();
                }
                struct.setParamsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, invoke_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.serverName != null) {
          oprot.writeFieldBegin(SERVER_NAME_FIELD_DESC);
          oprot.writeString(struct.serverName);
          oprot.writeFieldEnd();
        }
        if (struct.providerName != null) {
          oprot.writeFieldBegin(PROVIDER_NAME_FIELD_DESC);
          oprot.writeString(struct.providerName);
          oprot.writeFieldEnd();
        }
        if (struct.methodName != null) {
          oprot.writeFieldBegin(METHOD_NAME_FIELD_DESC);
          oprot.writeString(struct.methodName);
          oprot.writeFieldEnd();
        }
        if (struct.params != null) {
          oprot.writeFieldBegin(PARAMS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.params.size()));
            for (String _iter3 : struct.params)
            {
              oprot.writeString(_iter3);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class invoke_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public invoke_argsTupleScheme getScheme() {
        return new invoke_argsTupleScheme();
      }
    }

    private static class invoke_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<invoke_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, invoke_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetServerName()) {
          optionals.set(0);
        }
        if (struct.isSetProviderName()) {
          optionals.set(1);
        }
        if (struct.isSetMethodName()) {
          optionals.set(2);
        }
        if (struct.isSetParams()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetServerName()) {
          oprot.writeString(struct.serverName);
        }
        if (struct.isSetProviderName()) {
          oprot.writeString(struct.providerName);
        }
        if (struct.isSetMethodName()) {
          oprot.writeString(struct.methodName);
        }
        if (struct.isSetParams()) {
          {
            oprot.writeI32(struct.params.size());
            for (String _iter4 : struct.params)
            {
              oprot.writeString(_iter4);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, invoke_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.serverName = iprot.readString();
          struct.setServerNameIsSet(true);
        }
        if (incoming.get(1)) {
          struct.providerName = iprot.readString();
          struct.setProviderNameIsSet(true);
        }
        if (incoming.get(2)) {
          struct.methodName = iprot.readString();
          struct.setMethodNameIsSet(true);
        }
        if (incoming.get(3)) {
          {
            org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.params = new java.util.ArrayList<String>(_list5.size);
            @org.apache.thrift.annotation.Nullable String _elem6;
            for (int _i7 = 0; _i7 < _list5.size; ++_i7)
            {
              _elem6 = iprot.readString();
              struct.params.add(_elem6);
            }
          }
          struct.setParamsIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class invoke_result implements org.apache.thrift.TBase<invoke_result, invoke_result._Fields>, java.io.Serializable, Cloneable, Comparable<invoke_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("invoke_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new invoke_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new invoke_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(invoke_result.class, metaDataMap);
    }

    public invoke_result() {
    }

    public invoke_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public invoke_result(invoke_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public invoke_result deepCopy() {
      return new invoke_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    @org.apache.thrift.annotation.Nullable
    public String getSuccess() {
      return this.success;
    }

    public invoke_result setSuccess(@org.apache.thrift.annotation.Nullable String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof invoke_result)
        return this.equals((invoke_result)that);
      return false;
    }

    public boolean equals(invoke_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(invoke_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("invoke_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class invoke_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public invoke_resultStandardScheme getScheme() {
        return new invoke_resultStandardScheme();
      }
    }

    private static class invoke_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<invoke_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, invoke_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, invoke_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class invoke_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public invoke_resultTupleScheme getScheme() {
        return new invoke_resultTupleScheme();
      }
    }

    private static class invoke_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<invoke_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, invoke_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, invoke_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

}
